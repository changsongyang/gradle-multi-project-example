//file:noinspection DependencyNotationArgument
//file:noinspection GrUnresolvedAccess
buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/public" }

        mavenCentral()
    }
    dependencies {
    }
}

plugins {
    id 'idea'
    id 'java'
    id 'org.springframework.boot' version '3.2.1' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false

    id 'com.github.ben-manes.versions' version '0.50.0'
    id "com.gorylenko.gradle-git-properties" version "2.4.1" apply false
}

apply from: 'build-lib.gradle'

allprojects {
    repositories {
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

subprojects { subproj ->

    // 父级目录不作为项目模块
    def isSkipModule = ['modules', 'core', 'extra', 'shared'].contains(subproj.name)

    if (isSkipModule) {
        println("📛skip ${subproj.name}")
        return
    }

    apply from: "${rootDir}/build-ext.gradle"

    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '17'

    // 重命名 jar 包，格式为：项目名-模块名-子模块名-版本号.jar
    archivesBaseName = subproj.path.replace(':modules:', rootProject.name + '-').replace(':', '-')

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // 兼容 jetbrains annotations，只在编译期有效
        compileOnly 'org.jetbrains:annotations:24.1.0'

        implementation libraries.'logback-classic'
        implementation libraries.'jcl-over-slf4j'
        implementation libraries.'log4j-over-slf4j'

        implementation libraries.'commons-lang3'
        implementation libraries.'commons-io'
        implementation libraries.'commons-codec'
        implementation libraries.'commons-beanutils-core'


        implementation libraries.'spring-boot-starter-validation'
        implementation libraries.'spring-boot-starter-web'
        implementation libraries.'spring-boot-starter-cache'
        implementation libraries.'spring-boot-starter-thymeleaf'
        implementation libraries.'spring-boot-starter-actuator'
        developmentOnly libraries.'spring-boot-devtools'

        runtimeOnly libraries.'postgresql'
        runtimeOnly libraries.'HikariCP'

        // springdoc begin
        implementation libraries.'springdoc-openapi-ui'
        annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'
        // Runtime library
        implementation 'com.github.therapi:therapi-runtime-javadoc:0.15.0'
        // springdoc end


        // test
        testImplementation libraries.'junit'
        testImplementation libraries.'assertj'
        testImplementation libraries.'awaitility'
        testImplementation libraries.'greenmail'
        testImplementation libraries.'greenmail-junit5'
        testImplementation libraries.'spring-boot-starter-test'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    if (!subproj.name.startsWith('application')) {
        // 不打成 Spring Boot 格式的 jar 包
        jar {
            enabled = true
        }

        bootJar {
            enabled = false
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
